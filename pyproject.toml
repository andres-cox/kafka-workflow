[tool.poetry]
name = "kafka-workflow"
version = "0.1.0"
description = "Learning Kafka workflows with Python"
authors = ["Andres Cox <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.10"
kafka-python = "^2.1.5"
aiokafka = "^0.12.0"
loguru = "^0.7.3"
pydantic = "^2.11.3"

[tool.poetry.dev-dependencies]
mypy = "^1.15.0"
ruff = "^0.11.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 110
target-version = "py310"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "D203", # One blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
]

[tool.ruff.lint.isort]
known-first-party = ["kafka_workflow"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports
"**/schemas/*.py" = ["N805"]  # Allow cls in Pydantic validators

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
